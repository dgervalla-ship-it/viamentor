openapi: 3.0.3
info:
  title: Viamentor API
  description: |
    API complète pour la plateforme SaaS de gestion d'auto-écoles Viamentor.
    
    ## Authentification
    Toutes les routes (sauf `/auth/*`) nécessitent un token JWT Bearer.
    
    ## Pagination
    Les listes supportent les paramètres `limit` et `offset`.
    
    ## Erreurs
    Format standard des erreurs:
    ```json
    {
      "error": {
        "code": "ERROR_CODE",
        "message": "Message d'erreur",
        "statusCode": 400
      }
    }
    ```
  version: 1.0.0
  contact:
    name: Viamentor Support
    email: support@viamentor.ch
    url: https://viamentor.ch
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://viamentor.vercel.app/api
    description: Production
  - url: http://localhost:5174/api
    description: Development

tags:
  - name: Auth
    description: Authentification et gestion des sessions
  - name: Students
    description: Gestion des élèves
  - name: Instructors
    description: Gestion des moniteurs
  - name: Lessons
    description: Gestion des leçons pratiques
  - name: Courses
    description: Gestion des cours théoriques
  - name: Invoices
    description: Gestion de la facturation

paths:
  # ==================== AUTHENTICATION ====================
  /auth/login:
    post:
      tags: [Auth]
      summary: Connexion utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: "********"
      responses:
        '200':
          description: Connexion réussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /auth/signup:
    post:
      tags: [Auth]
      summary: Inscription utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, firstName, lastName]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                  minLength: 8
                firstName:
                  type: string
                  minLength: 2
                lastName:
                  type: string
                  minLength: 2
      responses:
        '201':
          description: Inscription réussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/ValidationError'

  /auth/logout:
    post:
      tags: [Auth]
      summary: Déconnexion utilisateur
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Déconnexion réussie

  # ==================== STUDENTS ====================
  /students:
    get:
      tags: [Students]
      summary: Liste des élèves
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, graduated]
      responses:
        '200':
          description: Liste des élèves
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'

    post:
      tags: [Students]
      summary: Créer un élève
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudentInput'
      responses:
        '201':
          description: Élève créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'

  /students/{id}:
    get:
      tags: [Students]
      summary: Détails d'un élève
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Détails de l'élève
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags: [Students]
      summary: Mettre à jour un élève
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStudentInput'
      responses:
        '200':
          description: Élève mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'

    delete:
      tags: [Students]
      summary: Supprimer un élève
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '204':
          description: Élève supprimé

  # ==================== INSTRUCTORS ====================
  /instructors:
    get:
      tags: [Instructors]
      summary: Liste des moniteurs
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: Liste des moniteurs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Instructor'

    post:
      tags: [Instructors]
      summary: Créer un moniteur
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInstructorInput'
      responses:
        '201':
          description: Moniteur créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instructor'

  /instructors/{id}:
    get:
      tags: [Instructors]
      summary: Détails d'un moniteur
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: Détails du moniteur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instructor'

  # ==================== LESSONS ====================
  /lessons:
    get:
      tags: [Lessons]
      summary: Liste des leçons
      security:
        - BearerAuth: []
      parameters:
        - name: student_id
          in: query
          schema:
            type: string
            format: uuid
        - name: instructor_id
          in: query
          schema:
            type: string
            format: uuid
        - name: date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Liste des leçons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lesson'

    post:
      tags: [Lessons]
      summary: Créer une leçon
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLessonInput'
      responses:
        '201':
          description: Leçon créée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lesson'

  # ==================== INVOICES ====================
  /invoices:
    get:
      tags: [Invoices]
      summary: Liste des factures
      security:
        - BearerAuth: []
      parameters:
        - name: student_id
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, sent, paid, overdue, cancelled]
      responses:
        '200':
          description: Liste des factures
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invoice'

    post:
      tags: [Invoices]
      summary: Créer une facture
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvoiceInput'
      responses:
        '201':
          description: Facture créée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'

  /invoices/{id}/pdf:
    get:
      tags: [Invoices]
      summary: Générer PDF de facture avec QR bill
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: PDF généré
          content:
            application/pdf:
              schema:
                type: string
                format: binary

  /invoices/{id}/qr-bill:
    get:
      tags: [Invoices]
      summary: Générer seulement le QR bill
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        '200':
          description: QR bill généré
          content:
            application/pdf:
              schema:
                type: string
                format: binary

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    IdParam:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    OffsetParam:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0

  schemas:
    # AUTH
    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        session:
          type: object
          properties:
            access_token:
              type: string
            refresh_token:
              type: string
            expires_at:
              type: integer

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time

    # STUDENT
    Student:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenant_id:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        date_of_birth:
          type: string
          format: date
        faber_number:
          type: string
        permit_type:
          type: string
          enum: [B, A, C, D, BE, CE]
        assigned_instructor_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [active, inactive, graduated]
        created_at:
          type: string
          format: date-time

    CreateStudentInput:
      type: object
      required: [first_name, last_name, email]
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        date_of_birth:
          type: string
          format: date
        permit_type:
          type: string

    UpdateStudentInput:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
        status:
          type: string
          enum: [active, inactive, graduated]

    # INSTRUCTOR
    Instructor:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenant_id:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        categories:
          type: array
          items:
            type: string
        languages:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [active, inactive, vacation]
        rating:
          type: number
          minimum: 0
          maximum: 5

    CreateInstructorInput:
      type: object
      required: [first_name, last_name, categories]
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        categories:
          type: array
          items:
            type: string
        languages:
          type: array
          items:
            type: string

    # LESSON
    Lesson:
      type: object
      properties:
        id:
          type: string
          format: uuid
        student_id:
          type: string
          format: uuid
        instructor_id:
          type: string
          format: uuid
        date:
          type: string
          format: date
        start_time:
          type: string
          pattern: '^([0-1][0-9]|2[0-3]):[0-5][0-9]$'
        duration_minutes:
          type: integer
          minimum: 30
          maximum: 120
        lesson_type:
          type: string
          enum: [practical, motorway, night, parking]
        status:
          type: string
          enum: [scheduled, completed, cancelled, no_show]
        price:
          type: number
          minimum: 0

    CreateLessonInput:
      type: object
      required: [student_id, instructor_id, date, start_time, category, price]
      properties:
        student_id:
          type: string
          format: uuid
        instructor_id:
          type: string
          format: uuid
        date:
          type: string
          format: date
        start_time:
          type: string
        category:
          type: string
        price:
          type: number

    # COURSE
    Course:
      type: object
      properties:
        id:
          type: string
          format: uuid
        category_id:
          type: string
          format: uuid
        title:
          type: string
        type:
          type: string
          enum: [weekday, weekend, intensive]
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        max_participants:
          type: integer
        current_participants:
          type: integer
        price:
          type: number
        status:
          type: string
          enum: [scheduled, in_progress, completed, cancelled]

    # INVOICE
    Invoice:
      type: object
      properties:
        id:
          type: string
          format: uuid
        invoice_number:
          type: string
          example: "INV-2025-0001"
        student_id:
          type: string
          format: uuid
        issue_date:
          type: string
          format: date
        due_date:
          type: string
          format: date
        total_amount:
          type: number
          minimum: 0
        currency:
          type: string
          enum: [CHF, EUR]
          default: CHF
        status:
          type: string
          enum: [draft, sent, paid, overdue, cancelled]
        payment_method:
          type: string
        created_at:
          type: string
          format: date-time

    CreateInvoiceInput:
      type: object
      required: [student_id, issue_date, due_date, total_amount]
      properties:
        student_id:
          type: string
          format: uuid
        issue_date:
          type: string
          format: date
        due_date:
          type: string
          format: date
        total_amount:
          type: number
          minimum: 0
        currency:
          type: string
          enum: [CHF, EUR]
        notes:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              description:
                type: string
              quantity:
                type: integer
                minimum: 1
              unit_price:
                type: number
                minimum: 0
              total:
                type: number
                minimum: 0

  responses:
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: NOT_FOUND
              message: Resource not found
              statusCode: 404

    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: AUTHENTICATION_ERROR
              message: Authentication required
              statusCode: 401

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: VALIDATION_ERROR
              message: Invalid input data
              statusCode: 400

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            statusCode:
              type: integer

