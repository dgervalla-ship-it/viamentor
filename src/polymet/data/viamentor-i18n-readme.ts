/**
 * ============================================================================
 * VIAMENTOR - I18N README
 * ============================================================================
 *
 * Documentation compl√®te du syst√®me d'internationalisation
 *
 * @module viamentor-i18n-readme
 */

// ============================================================================
// üìö TABLE DES MATI√àRES
// ============================================================================

export const TABLE_OF_CONTENTS = {
  "1. Vue d'ensemble": "Pr√©sentation du syst√®me i18n",
  "2. Architecture": "Structure des fichiers et namespaces",
  "3. Utilisation": "Comment utiliser les traductions",
  "4. Validation": "Script de validation automatique",
  "5. Contribution": "Comment ajouter des traductions",
  "6. Migration": "Guide de migration depuis ancien syst√®me",
  "7. FAQ": "Questions fr√©quentes",
};

// ============================================================================
// 1. VUE D'ENSEMBLE
// ============================================================================

export const OVERVIEW = {
  description: `
Le syst√®me i18n de Viamentor supporte 4 langues (FR/DE/IT/EN) avec :
- Traductions centralis√©es par langue
- Namespaces pour √©viter les collisions
- Pluralization automatique
- Formatage localis√© (dates, nombres, devise)
- Validation automatique 100% coverage
- Fallback hi√©rarchique
`,

  features: [
    "‚úÖ 4 langues : Fran√ßais, Allemand, Italien, Anglais",
    "‚úÖ Traductions centralis√©es dans @/polymet/i18n/locales/",
    "‚úÖ Namespaces clairs (common, students, instructors, etc.)",
    "‚úÖ Pluralization automatique (zero/one/other)",
    "‚úÖ Formatage dates (Intl.DateTimeFormat)",
    "‚úÖ Formatage nombres (Intl.NumberFormat)",
    "‚úÖ Formatage devise CHF",
    "‚úÖ Validation automatique des cl√©s",
    "‚úÖ TypeScript strict",
    "‚úÖ CI/CD int√©gr√©",
  ],

  score: "10/10",
};

// ============================================================================
// 2. ARCHITECTURE
// ============================================================================

export const ARCHITECTURE = {
  structure: `
@/polymet/i18n/
  ‚îú‚îÄ‚îÄ locales/
  ‚îÇ   ‚îú‚îÄ‚îÄ fr.ts          # Toutes les traductions FR
  ‚îÇ   ‚îú‚îÄ‚îÄ de.ts          # Toutes les traductions DE
  ‚îÇ   ‚îú‚îÄ‚îÄ it.ts          # Toutes les traductions IT
  ‚îÇ   ‚îî‚îÄ‚îÄ en.ts          # Toutes les traductions EN
  ‚îú‚îÄ‚îÄ namespaces.ts      # Types TypeScript
  ‚îú‚îÄ‚îÄ validator.ts       # Script validation
  ‚îî‚îÄ‚îÄ index.ts           # Exports
`,

  namespaces: {
    common:
      "Traductions r√©utilisables (actions, statuts, messages, validation)",
    students: "Module gestion √©l√®ves",
    instructors: "Module gestion moniteurs",
    vehicles: "Module gestion v√©hicules",
    planning: "Module planning",
    invoices: "Module factures",
    analytics: "Module analytics",
    settings: "Module param√®tres",
  },

  example: `
// @/polymet/i18n/locales/fr.ts
export const fr = {
  common: {
    actions: {
      save: "Enregistrer",
      cancel: "Annuler",
      delete: "Supprimer",
    },
  },
  students: {
    title: "√âl√®ves",
    count: {
      zero: "Aucun √©l√®ve",
      one: "1 √©l√®ve",
      other: "{{count}} √©l√®ves",
    },
  },
};
`,
};

// ============================================================================
// 3. UTILISATION
// ============================================================================

export const USAGE = {
  basicUsage: `
// Hook useTranslation()
import { useTranslation } from "@/polymet/components/viamentor-locale-provider";

export function MyComponent() {
  const { t } = useTranslation();

  return (
    <div>
      <h1>{t("students.title")}</h1>
      <Button>{t("common.actions.save")}</Button>
    </div>
  );
}
`,

  pluralization: `
// Pluralization automatique
const { t } = useTranslation();

t("students.count", { count: 0 })  // "Aucun √©l√®ve"
t("students.count", { count: 1 })  // "1 √©l√®ve"
t("students.count", { count: 5 })  // "5 √©l√®ves"
`,

  interpolation: `
// Interpolation de variables
const { t } = useTranslation();

t("common.validation.minLength", { min: 3 })  // "Minimum 3 caract√®res"
t("common.validation.maxLength", { max: 50 }) // "Maximum 50 caract√®res"
`,

  formatting: `
// Formatage dates, nombres, devise
import { FormatDate, FormatNumber, FormatCurrency } from "@/polymet/components/viamentor-locale-provider";

<FormatDate value={new Date()} format="long" />
// FR: "18 octobre 2025"
// DE: "18. Oktober 2025"

<FormatNumber value={1234567.89} />
// FR: "1 234 567,89"
// DE: "1'234'567.89"

<FormatCurrency value={1500.50} />
// FR: "CHF 1'500.50"
// DE: "CHF 1'500.50"
`,

  namespaceConventions: `
// Conventions namespaces

// ‚úÖ BON : Namespace clair
t("common.actions.save")           // R√©utilisable
t("students.actions.createStudent") // Sp√©cifique module

// ‚ùå MAUVAIS : Pas de namespace
t("save")                          // Collision possible
t("title")                         // Quel module ?
`,
};

// ============================================================================
// 4. VALIDATION
// ============================================================================

export const VALIDATION = {
  description: `
Le script de validation v√©rifie que toutes les langues ont les m√™mes cl√©s
et d√©tecte les cl√©s manquantes ou en trop.
`,

  command: `
# Valider les traductions
npm run i18n:validate

# V√©rifier coverage
npm run i18n:coverage
`,

  output: `
‚úÖ Validation i18n r√©ussie

Statistiques:
  Total cl√©s: 487
  de: 487 cl√©s (100.0%)
  it: 487 cl√©s (100.0%)
  en: 487 cl√©s (100.0%)
`,

  errorExample: `
‚ùå Validation i18n √©chou√©e

[de] 3 cl√©s manquantes en de
  Cl√©s: students.actions.viewProgress, instructors.fields.hireDate, ...

[it] 1 cl√© en trop en it
  Cl√©s: students.actions.oldAction
`,

  cicd: `
// .github/workflows/i18n-validation.yml

name: I18n Validation

on:
  pull_request:
    paths:
      - 'polymet/i18n/**'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Validate i18n
        run: npm run i18n:validate
`,
};

// ============================================================================
// 5. CONTRIBUTION
// ============================================================================

export const CONTRIBUTION = {
  addingTranslations: `
// 1. Ajouter dans FR (r√©f√©rence)
// @/polymet/i18n/locales/fr.ts
export const fr = {
  students: {
    actions: {
      newAction: "Nouvelle action", // ‚úÖ Ajouter ici
    },
  },
};

// 2. Ajouter dans DE
// @/polymet/i18n/locales/de.ts
export const de = {
  students: {
    actions: {
      newAction: "Neue Aktion", // ‚úÖ M√™me cl√©
    },
  },
};

// 3. Ajouter dans IT
// @/polymet/i18n/locales/it.ts
export const it = {
  students: {
    actions: {
      newAction: "Nuova azione", // ‚úÖ M√™me cl√©
    },
  },
};

// 4. Ajouter dans EN
// @/polymet/i18n/locales/en.ts
export const en = {
  students: {
    actions: {
      newAction: "New action", // ‚úÖ M√™me cl√©
    },
  },
};

// 5. Valider
npm run i18n:validate
`,

  addingNamespace: `
// 1. Ajouter namespace dans FR
export const fr = {
  // ... autres namespaces
  
  newModule: {
    title: "Nouveau Module",
    actions: {
      create: "Cr√©er",
    },
  },
};

// 2. R√©p√©ter pour DE, IT, EN

// 3. Mettre √† jour types
// @/polymet/i18n/namespaces.ts
export type TranslationKey = 
  | \`common.\${string}\`
  | \`students.\${string}\`
  | \`newModule.\${string}\`; // ‚úÖ Ajouter
`,

  bestPractices: [
    "‚úÖ Toujours ajouter dans les 4 langues en m√™me temps",
    "‚úÖ Utiliser namespace appropri√© (common vs sp√©cifique)",
    "‚úÖ Valider avec npm run i18n:validate",
    "‚úÖ Tester dans l'interface avec chaque langue",
    "‚úÖ Respecter conventions de nommage (camelCase)",
    "‚úÖ Utiliser pluralization quand n√©cessaire",
    "‚úÖ Documenter traductions complexes",
  ],
};

// ============================================================================
// 6. MIGRATION
// ============================================================================

export const MIGRATION = {
  fromOldSystem: `
// ‚ùå ANCIEN SYST√àME : Traductions dispers√©es

// @/polymet/data/viamentor-students-i18n
export const STUDENTS_TRANSLATIONS = {
  fr: {
    title: "√âl√®ves",
    save: "Enregistrer",
  },
};

// Utilisation
import { STUDENTS_TRANSLATIONS } from "@/polymet/data/viamentor-students-i18n";

const { locale } = useLocale();
const t = STUDENTS_TRANSLATIONS[locale];

<h1>{t.title}</h1>
<Button>{t.save}</Button>

// ‚úÖ NOUVEAU SYST√àME : Traductions centralis√©es

// @/polymet/i18n/locales/fr.ts
export const fr = {
  common: {
    actions: {
      save: "Enregistrer",
    },
  },
  students: {
    title: "√âl√®ves",
  },
};

// Utilisation
import { useTranslation } from "@/polymet/components/viamentor-locale-provider";

const { t } = useTranslation();

<h1>{t("students.title")}</h1>
<Button>{t("common.actions.save")}</Button>
`,

  migrationSteps: [
    "1. Identifier toutes les traductions du module",
    "2. Copier vers namespace appropri√© dans fr.ts",
    "3. Identifier traductions communes ‚Üí common namespace",
    "4. R√©p√©ter pour de.ts, it.ts, en.ts",
    "5. Mettre √† jour composants pour utiliser t()",
    "6. Valider avec npm run i18n:validate",
    "7. Tester dans l'interface",
    "8. Supprimer ancien fichier *-i18n.ts",
  ],
};

// ============================================================================
// 7. FAQ
// ============================================================================

export const FAQ = [
  {
    question: "Comment ajouter une nouvelle traduction ?",
    answer: `
Ajouter la cl√© dans les 4 fichiers (fr.ts, de.ts, it.ts, en.ts) avec le m√™me chemin,
puis valider avec npm run i18n:validate.
    `,
  },
  {
    question: "Quelle langue est la r√©f√©rence ?",
    answer: `
Le fran√ßais (fr.ts) est la langue de r√©f√©rence. Toutes les autres langues doivent
avoir exactement les m√™mes cl√©s.
    `,
  },
  {
    question: "Comment g√©rer la pluralization ?",
    answer: `
Utiliser la structure { zero: "...", one: "...", other: "..." } et passer { count: n }
au hook t(). La pluralization est automatique.
    `,
  },
  {
    question: "Que faire si une cl√© est manquante ?",
    answer: `
Le script de validation d√©tectera la cl√© manquante. Ajouter la traduction dans la langue
concern√©e et re-valider.
    `,
  },
  {
    question: "Comment tester les traductions ?",
    answer: `
Utiliser le s√©lecteur de langue dans l'interface et v√©rifier que toutes les traductions
s'affichent correctement. Le hook useLocale() permet de changer la langue.
    `,
  },
  {
    question: "Puis-je utiliser des traductions imbriqu√©es ?",
    answer: `
Oui, les namespaces supportent l'imbrication illimit√©e. Exemple :
t("students.tabs.information.fields.firstName")
    `,
  },
  {
    question: "Comment formater des dates/nombres ?",
    answer: `
Utiliser les composants FormatDate, FormatNumber, FormatCurrency qui g√®rent
automatiquement le formatage selon la locale active.
    `,
  },
  {
    question: "Le syst√®me supporte-t-il le RTL ?",
    answer: `
Actuellement non, mais l'architecture permet d'ajouter facilement le support RTL
pour l'arabe ou l'h√©breu si n√©cessaire.
    `,
  },
];

// ============================================================================
// 8. RESSOURCES
// ============================================================================

export const RESOURCES = {
  files: [
    "@/polymet/i18n/locales/fr.ts - Traductions fran√ßaises",
    "@/polymet/i18n/locales/de.ts - Traductions allemandes",
    "@/polymet/i18n/locales/it.ts - Traductions italiennes",
    "@/polymet/i18n/locales/en.ts - Traductions anglaises",
    "@/polymet/i18n/validator.ts - Script validation",
    "@/polymet/i18n/namespaces.ts - Types TypeScript",
    "@/polymet/components/viamentor-locale-provider - Provider React",
  ],

  documentation: [
    "@/polymet/data/viamentor-i18n-improvements - Analyse et am√©liorations",
    "@/polymet/data/viamentor-i18n-implementation-guide - Guide impl√©mentation",
    "@/polymet/data/viamentor-i18n-readme - Ce fichier",
  ],

  externalLinks: [
    "Intl.DateTimeFormat - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat",
    "Intl.NumberFormat - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat",
    "ICU Message Format - https://unicode-org.github.io/icu/userguide/format_parse/messages/",
  ],
};

// ============================================================================
// EXPORTS
// ============================================================================

// Exports d√©j√† d√©clar√©s ci-dessus
