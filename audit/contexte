# 🚗 ViaMenutor - Contexte Projet pour Cursor AI

## 📋 Vue d'Ensemble

**ViaMenutor** est une plateforme SaaS complète de gestion d'auto-écoles en Suisse, permettant de gérer les élèves, moniteurs, cours théoriques, leçons pratiques, examens, paiements et bien plus.

### Objectif Principal
Digitaliser complètement la gestion d'une auto-école avec:
- Gestion élèves/moniteurs/véhicules
- Planification cours théoriques (CTC/Premier Secours/Sensibilisation)
- Réservation leçons pratiques
- Attribution intelligente élèves-moniteurs
- Facturation & paiements
- Tableau de bord analytics
- Multi-école (franchises)

### Public Cible
- Auto-écoles suisses (FR/DE/IT/EN)
- Moniteurs indépendants
- Élèves conducteurs
- Administrateurs d'écoles
- Franchises multi-sites

---

## 🛠️ Stack Technique

### Frontend
```json
{
  "framework": "Next.js 15 (App Router)",
  "language": "TypeScript 5.3+",
  "styling": "Tailwind CSS 3.4+",
  "ui": "shadcn/ui + Radix UI",
  "state": "TanStack Query (React Query) + Zustand",
  "forms": "React Hook Form + Zod",
  "i18n": "next-intl (FR/DE/IT/EN)",
  "charts": "Recharts",
  "calendar": "FullCalendar",
  "icons": "Lucide React",
  "animations": "Framer Motion"
}
```

### Backend (Phase 2 - À venir)
```json
{
  "database": "Supabase (PostgreSQL)",
  "orm": "Prisma",
  "auth": "Supabase Auth",
  "storage": "Supabase Storage",
  "api": "Next.js API Routes / Server Actions",
  "email": "Resend",
  "sms": "Twilio",
  "payments": "Stripe",
  "pdf": "jsPDF / PDFKit"
}
```

### DevOps
```json
{
  "hosting": "Vercel",
  "ci_cd": "GitHub Actions",
  "monitoring": "Sentry",
  "analytics": "Vercel Analytics"
}
```

---

## 📁 Structure du Projet
```
viamentor/
├── app/
│   ├── [locale]/                    # Routes internationalisées
│   │   ├── (auth)/                  # Groupe auth (login/register)
│   │   ├── (dashboard)/             # Groupe dashboard protégé
│   │   │   ├── school/              # Routes école
│   │   │   │   ├── dashboard/       # Tableau de bord école
│   │   │   │   ├── students/        # Gestion élèves
│   │   │   │   ├── instructors/     # Gestion moniteurs
│   │   │   │   ├── courses/         # Cours théoriques
│   │   │   │   │   ├── categories/  # Catégories (CTC/PS/SENS)
│   │   │   │   │   ├── calendar/    # Calendrier drag & drop
│   │   │   │   │   └── sessions/    # Séances individuelles
│   │   │   │   ├── lessons/         # Leçons pratiques
│   │   │   │   ├── assignments/     # Attribution élèves-moniteurs
│   │   │   │   ├── vehicles/        # Gestion véhicules
│   │   │   │   ├── billing/         # Facturation
│   │   │   │   └── settings/        # Paramètres école
│   │   │   ├── instructor/          # Routes moniteur
│   │   │   ├── student/             # Routes élève
│   │   │   └── admin/               # Routes admin système
│   │   ├── layout.tsx               # Layout racine
│   │   └── page.tsx                 # Page d'accueil
│   └── api/                         # API Routes (Phase 2)
│
├── components/
│   ├── ui/                          # shadcn/ui base components
│   ├── layout/                      # Layout components (Sidebar, Header)
│   ├── students/                    # Composants élèves
│   ├── instructors/                 # Composants moniteurs
│   ├── courses/                     # Composants cours théoriques
│   ├── lessons/                     # Composants leçons
│   ├── assignments/                 # Composants attribution
│   ├── billing/                     # Composants facturation
│   ├── notifications/               # Composants notifications
│   └── shared/                      # Composants réutilisables
│
├── lib/
│   ├── services/                    # Services métier
│   │   ├── assignment-algorithm.service.ts
│   │   ├── courses-calendar.service.ts
│   │   ├── certificates-pdf.service.ts
│   │   ├── notifications.service.ts
│   │   └── payments.service.ts
│   ├── hooks/                       # Custom React hooks
│   ├── utils/                       # Fonctions utilitaires
│   ├── validations/                 # Schémas Zod validation
│   └── constants/                   # Constantes globales
│
├── data/                            # Mock data (Phase 1)
│   ├── viamentor-students-data.tsx
│   ├── viamentor-instructors-data.tsx
│   ├── viamentor-courses-data.tsx
│   ├── viamentor-lessons-data.tsx
│   └── viamentor-*-i18n.tsx         # Traductions mock
│
├── prisma/                          # Prisma schema (Phase 2)
│   ├── schema.prisma                # 85 tables définies
│   ├── migrations/
│   └── seed.ts
│
├── public/
│   ├── images/
│   ├── locales/                     # Fichiers i18n JSON
│   │   ├── fr/
│   │   ├── de/
│   │   ├── it/
│   │   └── en/
│   └── fonts/
│
├── types/                           # TypeScript types globaux
│   ├── student.types.ts
│   ├── instructor.types.ts
│   ├── course.types.ts
│   └── index.ts
│
├── .env.local                       # Variables environnement
├── next.config.js
├── tailwind.config.js
├── tsconfig.json
└── package.json
```

---

## 🎯 Fonctionnalités Principales

### ✅ Complétées (Phase 1 - Frontend)

#### 1. **Gestion Élèves**
- CRUD élèves complet
- Profils détaillés (FABER, permis, catégories)
- Historique leçons/examens/paiements
- Documents uploadés
- Progression formation
- Notes internes

#### 2. **Gestion Moniteurs**
- CRUD moniteurs
- Disponibilités calendrier
- Catégories autorisées (A/B/C/D/Moto)
- Langues parlées
- Évaluations/avis
- Workload tracking

#### 3. **Attribution Élèves-Moniteurs**
- Algorithme workload balancing intelligent (score 0-100)
- Recommandations automatiques moniteurs moins chargés
- Propositions moniteurs → validation école
- Accès temporaires autres moniteurs
- Historique complet attributions
- Analytics (durée moyenne, taux réattribution)

#### 4. **Cours Théoriques**
- Catégories (CTC/Premier Secours/Sensibilisation/Moto)
- Types de cours (semaine/weekend/intensif)
- Structure séances multiples
- **Calendrier drag & drop** (FullCalendar)
- Génération automatique séries cours
- Gestion participants inscrits
- Validation présences
- Génération attestations PDF auto
- Email certificats automatique

#### 5. **Tableau de Bord**
- Stats temps réel
- Graphiques analytics (Recharts)
- KPIs auto-école
- Alertes importantes

#### 6. **Notifications Center**
- Lecture messages système
- 15+ types notifications
- Réponses inline rich text
- Filtres avancés
- Préférences granulaires
- Real-time WebSocket

#### 7. **Multi-langue (i18n)**
- Français, Allemand, Italien, Anglais
- next-intl intégration
- Switch langue dynamique
- Traductions complètes

### ⏳ En Cours (Phase 1)

- Leçons pratiques planning
- Examens gestion
- Facturation & paiements UI
- Véhicules gestion
- Marketing pages
- Documentation utilisateur

### 🔜 À Venir (Phase 2 - Backend)

- Supabase intégration
- Prisma schema déploiement (85 tables)
- Authentication Supabase
- API Routes complètes
- RLS Policies sécurité
- Intégrations (Stripe/Twilio/Resend)
- Tests E2E Playwright
- CI/CD GitHub Actions
- Deploy Vercel production

---

## 📐 Architecture & Patterns

### Design Patterns Utilisés

1. **Component Pattern**: Composants réutilisables UI
2. **Container/Presenter**: Séparation logique/affichage
3. **Custom Hooks**: Logique métier encapsulée
4. **Service Layer**: Services métier isolés (`lib/services/`)
5. **Repository Pattern**: Accès données abstrait (Phase 2)
6. **Factory Pattern**: Génération mock data
7. **Strategy Pattern**: Algorithme attribution configurable

### Principes SOLID

- **S**ingle Responsibility: 1 composant = 1 responsabilité
- **O**pen/Closed: Extensions sans modifications
- **L**iskov Substitution: Types interchangeables
- **I**nterface Segregation: Interfaces spécifiques
- **D**ependency Inversion: Dépendre abstractions

### Clean Code Rules
```typescript
// ✅ BON: Composant 200-250 lignes max
// ✅ BON: Noms descriptifs explicites
// ✅ BON: Early returns validation
// ✅ BON: Commentaires seulement si nécessaire
// ✅ BON: Fonctions pures quand possible
// ✅ BON: TypeScript strict mode
// ✅ BON: Pas de `any` types
```

---

## 🎨 Conventions de Code

### Naming Conventions
```typescript
// Composants: PascalCase
StudentProfileCard.tsx
InstructorAssignmentWizard.tsx

// Fonctions: camelCase
calculateWorkloadScore()
generateCertificatePDF()

// Types/Interfaces: PascalCase avec suffix
StudentFormData
InstructorProfile
CourseCategory

// Constants: SCREAMING_SNAKE_CASE
MAX_STUDENTS_PER_INSTRUCTOR = 12
DEFAULT_LESSON_DURATION = 50

// Fichiers services: kebab-case + .service.ts
assignment-algorithm.service.ts
certificates-pdf.service.ts

// Fichiers data: kebab-case + -data.tsx
viamentor-students-data.tsx
viamentor-courses-categories-data.tsx
```

### File Organization
```typescript
// Structure composant type:
// 1. Imports externes
import React from 'react';
import { useQuery } from '@tanstack/react-query';

// 2. Imports internes
import { Button } from '@/components/ui/button';
import { studentService } from '@/lib/services/students.service';

// 3. Types locaux
interface StudentCardProps {
  student: Student;
  onEdit: (id: string) => void;
}

// 4. Composant principal
export function StudentCard({ student, onEdit }: StudentCardProps) {
  // Hooks
  const { data, isLoading } = useQuery(/*...*/);
  
  // Early returns
  if (isLoading) return ;
  if (!data) return null;
  
  // Event handlers
  const handleEdit = () => onEdit(student.id);
  
  // Render
  return (
    
      {/* JSX */}
    
  );
}

// 5. Exports nommés secondaires si nécessaire
export { type StudentCardProps };
```

### TypeScript Strict Rules
```typescript
// ❌ INTERDIT
const user: any = getUserData(); // Pas de `any`
function doSomething(data) { } // Types requis

// ✅ OBLIGATOIRE
const user: User = getUserData();
function doSomething(data: FormData): Promise { }

// Type guards
if (typeof value === 'string') { }
if (Array.isArray(items)) { }
if ('email' in user) { }
```

### React Best Practices
```typescript
// ✅ Memoization composants lourds
export const StudentCard = React.memo(function StudentCard(props) {
  // ...
});

// ✅ useMemo calculs coûteux
const sortedStudents = useMemo(
  () => students.sort((a, b) => a.name.localeCompare(b.name)),
  [students]
);

// ✅ useCallback event handlers
const handleSubmit = useCallback((data: FormData) => {
  submitStudent(data);
}, [submitStudent]);

// ✅ Custom hooks logique réutilisable
function useStudentForm(initialData?: Student) {
  const [data, setData] = useState(initialData);
  // ...
  return { data, handleChange, handleSubmit };
}
```

---

## 🔧 Configuration Environnement

### Variables Environnement (`.env.local`)
```bash
# App
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_PUBLIC_APP_NAME=ViaMenutor

# Supabase (Phase 2)
NEXT_PUBLIC_SUPABASE_URL=
NEXT_PUBLIC_SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE_KEY=

# Stripe (Phase 2)
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=
STRIPE_SECRET_KEY=
STRIPE_WEBHOOK_SECRET=

# Resend Email (Phase 2)
RESEND_API_KEY=

# Twilio SMS (Phase 2)
TWILIO_ACCOUNT_SID=
TWILIO_AUTH_TOKEN=
TWILIO_PHONE_NUMBER=

# Sentry (Phase 2)
SENTRY_DSN=
```

---

## 🚀 Commandes Utiles
```bash
# Installation
npm install
# ou
pnpm install
# ou
yarn install

# Développement
npm run dev          # Port 3000

# Build production
npm run build
npm run start

# Linting
npm run lint
npm run lint:fix

# Type checking
npm run type-check

# Format code
npm run format

# Tests (Phase 2)
npm run test
npm run test:e2e
npm run test:coverage
```

---

## 📊 État Actuel du Projet

### Phase Actuelle: **PHASE 1 - Frontend UI/UX (80% complété)**

#### ✅ Terminé
- [x] Architecture Next.js 15 App Router
- [x] Configuration Tailwind + shadcn/ui
- [x] i18n 4 langues (FR/DE/IT/EN)
- [x] Layout Dashboard responsive
- [x] Gestion élèves CRUD complet
- [x] Gestion moniteurs CRUD complet
- [x] Système attribution intelligent
- [x] Cours théoriques catégories + types
- [x] Calendrier drag & drop cours
- [x] Validation présences + PDF attestations
- [x] Notifications center complet
- [x] ~172 pages générées
- [x] ~316 composants créés
- [x] Mock data complet

#### 🏗️ En cours (27% Phase 1)
- [ ] Leçons pratiques booking
- [ ] Examens gestion complète
- [ ] Facturation UI + invoices
- [ ] Véhicules gestion flottes
- [ ] Documentation utilisateur
- [ ] Pages marketing (landing/pricing)
- [ ] Onboarding tours interactifs
- [ ] Help tooltips système

#### ⏰ Reste Phase 1 (20%)
- Dark mode complet toutes pages
- Responsive mobile polish
- Accessibility WCAG AA
- Performance optimization
- Bundle size <500kb
- Lighthouse score >90

### Prochaine Phase: **PHASE 2 - Backend (0% complété)**

Planning estimé: 20-30 jours après Phase 1

---

## 🎯 Objectifs Immédiats

### Pour Cursor AI, je veux que tu m'aides à:

1. **Terminer Phase 1 Frontend**
   - Implémenter pages/fonctionnalités manquantes
   - Optimiser performance (lazy loading, code splitting)
   - Améliorer responsive mobile
   - Finaliser dark mode
   - Corriger bugs TypeScript

2. **Préparer Phase 2 Backend**
   - Valider Prisma schema (85 tables)
   - Planifier architecture API
   - Définir structure Server Actions
   - Préparer migrations Supabase

3. **Maintenir Qualité Code**
   - Respecter conventions naming
   - Garder composants <250 lignes
   - Assurer TypeScript strict
   - Documenter code complexe
   - Tests unitaires critiques

---

## 📚 Ressources & Références

### Documentation Officielle
- Next.js 15: https://nextjs.org/docs
- Tailwind CSS: https://tailwindcss.com/docs
- shadcn/ui: https://ui.shadcn.com
- Radix UI: https://www.radix-ui.com
- TanStack Query: https://tanstack.com/query
- next-intl: https://next-intl-docs.vercel.app
- Supabase: https://supabase.com/docs
- Prisma: https://www.prisma.io/docs

### Inspirations Design
- SARI CTC/IPB (système suisse auto-écoles)
- Google Calendar (planning drag & drop)
- Stripe Dashboard (clean UI/UX)
- Linear (workflow fluide)

---

## ⚠️ Règles Importantes pour Cursor

### À TOUJOURS RESPECTER

1. **TypeScript Strict**: Pas de `any`, types explicites partout
2. **Composants <250 lignes**: Si plus long, découper en sous-composants
3. **Naming Conventions**: Respecter PascalCase/camelCase/kebab-case
4. **i18n**: Tout texte UI doit être traduit (FR/DE/IT/EN)
5. **Responsive**: Mobile-first, tester 3 breakpoints (mobile/tablet/desktop)
6. **Accessibility**: ARIA labels, keyboard navigation, contrast
7. **Performance**: React.memo si >100 lignes, useMemo/useCallback
8. **Clean Code**: Early returns, pas de nested if >3 niveaux
9. **Mock Data Phase 1**: Utiliser `data/viamentor-*-data.tsx`
10. **Comments**: Seulement pour logique complexe, pas l'évidence

### À NE JAMAIS FAIRE

❌ Utiliser `any` types TypeScript
❌ Texte hardcodé (toujours passer par i18n)
❌ Composants >300 lignes sans découpage
❌ Importer depuis node_modules indisponibles
❌ Console.log en production (utiliser logger)
❌ Inline styles (toujours Tailwind classes)
❌ localStorage/sessionStorage dans artifacts (React state uniquement)
❌ Nested if >3 niveaux (early returns)
❌ Magic numbers (utiliser constantes)
❌ Code dupliqué (extraire hooks/utils)

---

## 🤝 Comment M'Aider (Cursor)

### Quand je te demande du code:

1. **Comprendre le contexte**: Quelle page/feature? Quelle phase?
2. **Respecter l'architecture**: Utiliser structure dossiers existante
3. **TypeScript strict**: Types explicites, pas d'any
4. **Clean Code**: Commentaires minimum, noms descriptifs
5. **i18n ready**: Prévoir traductions 4 langues
6. **Responsive**: Mobile-first approach
7. **Performance**: Optimisations nécessaires
8. **Tester**: Vérifier TypeScript compile sans erreurs

### Format Réponses Idéal:
```typescript
// 1. Expliquer brièvement ce que fait le code
// 2. Fournir code complet prêt à copier-coller
// 3. Indiquer où placer le fichier
// 4. Mentionner dépendances si nécessaires
// 5. Donner exemple d'utilisation si composant
```

---

## 📞 Informations Complémentaires

**Projet**: ViaMenutor - Plateforme SaaS Auto-Écoles Suisse
**Tech Lead**: [Ton nom]
**Début Projet**: [Date]
**Phase Actuelle**: Phase 1 - Frontend (80%)
**Target Launch**: [Date estimation]

**Questions fréquentes:**
- **Pourquoi mock data?** Phase 1 = UI/UX pure, backend vient après
- **Pourquoi Next.js?** SSR/SSG, SEO, performance, API routes intégrés
- **Pourquoi Supabase?** PostgreSQL, Auth, Storage, RLS tout-en-un
- **Pourquoi Prisma?** Type-safe ORM, migrations, excellent DX

---

## 🎓 Pour Bien Démarrer

### Comprends d'abord:
1. Lis cette doc complète
2. Explore structure `/app/[locale]/`
3. Regarde composants `/components/`
4. Check mock data `/data/`
5. Vois services `/lib/services/`

### Ensuite:
1. Identifie quelle feature travailler
2. Vérifie conventions naming
3. Respecte architecture existante
4. Code propre TypeScript strict
5. Test responsive + i18n

---

**Cursor, tu es maintenant prêt à m'aider sur ViaMenutor! 🚀**

**Questions? Demande-moi des précisions sur n'importe quel point de ce document.**

📋 INSTRUCTIONS D'UTILISATION
1. Créer le fichier
bashtouch CURSOR_CONTEXT.md
```

### **2. Copier le contenu ci-dessus**
Copie TOUT le markdown entre les triple backticks

### **3. Placer à la racine du projet**
```
viamentor/
├── CURSOR_CONTEXT.md    ← ICI
├── app/
├── components/
├── lib/
└── ...
```

### **4. Dans Cursor, références le fichier**

**Option A - Chat Cursor:**
```
@CURSOR_CONTEXT.md 

Je veux ajouter une nouvelle fonctionnalité pour...
```

**Option B - Commande:**
```
Cmd/Ctrl + L → Sélectionner CURSOR_CONTEXT.md → Poser question
```

**Option C - Automatique:**
Cursor détectera automatiquement ce fichier et l'utilisera comme contexte

---

## 🎯 **EXEMPLES QUESTIONS À CURSOR**

### **Exemple 1: Créer nouveau composant**
```
@CURSOR_CONTEXT.md

Je veux créer un composant StudentProgressChart qui affiche 
la progression d'un élève avec Recharts. Où le placer et 
comment le structurer selon nos conventions?
```

### **Exemple 2: Débugger erreur**
```
@CURSOR_CONTEXT.md

J'ai une erreur TypeScript dans StudentForm.tsx ligne 45:
"Type 'string' is not assignable to type 'StudentCategory'"

Comment la corriger en respectant notre typage strict?
```

### **Exemple 3: Optimiser performance**
```
@CURSOR_CONTEXT.md

Ma page /school/students est lente avec 500+ élèves. 
Comment optimiser selon nos best practices (virtualization, 
memoization, code splitting)?
```

### **Exemple 4: Ajouter nouvelle feature**
```
@CURSOR_CONTEXT.md

Je veux ajouter un système de chat entre moniteur et élève.
Quelle architecture suggères-tu selon notre stack actuel 
(Phase 1 mock data)?

📊 DOCUMENTS ADDITIONNELS OPTIONNELS
Si tu veux être encore plus précis, tu peux créer:
1. PROMPTS_HISTORY.md (historique de nos 144 prompts)
markdown# Historique Prompts Polymet ViaMenutor

## Module 1: Dashboard École
- Prompt 1A: Stats cards + KPIs
- Prompt 1B: Charts analytics
...

## Module 38: Cours Théoriques
- Prompt 38A: Catégories CRUD
- Prompt 38B: Types cours
- Prompt 38C: Calendrier vue
- Prompt 38D: Drag & drop
- Prompt 38E: Séances
- Prompt 38F: Attestations PDF
2. PRISMA_SCHEMA.md (85 tables définies)
markdown# Prisma Schema ViaMenutor - 85 Tables

## Core Tables
- users
- schools
- students
- instructors
- vehicles
...

## Courses Tables
- course_categories
- course_types
- course_sessions
- course_participants
- certificates
...
3. API_ROUTES.md (pour Phase 2)
markdown# API Routes ViaMenutor

## Students API
- GET    /api/students
- POST   /api/students
- PATCH  /api/students/:id
- DELETE /api/students/:id
...
```

---

## ✅ **CHECKLIST AVANT D'ENVOYER À CURSOR**
```
□ CURSOR_CONTEXT.md créé à la racine
□ Contenu complet copié
□ Informations projet mises à jour (nom, dates)
□ Stack tech vérifiée
□ Structure dossiers correspond à ton projet
□ Conventions de code documentées
□ État actuel Phase 1 précisé
□ Règles importantes claires
□ Exemples questions ajoutés

🚀 RÉSULTAT ATTENDU
Avec ce document, Cursor AI comprendra:
✅ Ton projet complet (ViaMenutor auto-écoles)
✅ Ta stack technique (Next.js 15 + TypeScript + Supabase)
✅ Ton architecture et structure
✅ Tes conventions de code strictes
✅ L'état actuel (Phase 1 80%)
✅ Ce que tu attends (finir Phase 1, préparer Phase 2)
✅ Les règles à TOUJOURS respecter
✅ Comment t'aider efficacement
Cursor pourra alors:

Générer du code conforme à tes standards
Respecter ta structure existante
Utiliser tes conventions naming
Intégrer proprement dans ton projet
Suggérer des améliorations pertinentes
Débugger intelligemment
T'accompagner vers Phase 2